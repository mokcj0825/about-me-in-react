{
  "id": "canopy_of_mottled_metal_test",
  "name": "Canopy of Mottled Metal Defense Test",
  "description": "Demonstrates the DEF increase mechanism of Canopy of Mottled Metal blessing after AoE ability use",
  "rarity": 1,
  "category": "defense",
  "implementation": {
    "data_structures": {
      "buff": {
        "id": "canopy_def_buff",
        "type": "stat_modifier",
        "stat": "def",
        "value": 30,
        "value_type": "percentage",
        "duration": 2,
        "stack_type": "refresh",
        "trigger": "after_aoe"
      },
      "event_types": [
        "ability_used",
        "buff_applied",
        "buff_removed",
        "turn_start",
        "turn_end"
      ],
      "required_interfaces": {
        "BuffManager": {
          "methods": [
            "applyBuff(target: Unit, buff: Buff): void",
            "removeBuff(target: Unit, buffId: string): void",
            "updateBuffDurations(unit: Unit): void",
            "getActiveBuffs(unit: Unit): Buff[]"
          ]
        },
        "AbilityHandler": {
          "methods": [
            "isAoeAbility(ability: Ability): boolean",
            "handleAbilityUsed(actor: Unit, ability: Ability, targets: Unit[]): void"
          ]
        }
      }
    },
    "event_flow": [
      {
        "trigger": "ability_used",
        "checks": [
          "Is ability AoE or splash type?",
          "Does user have canopy_of_mottled_metal blessing?"
        ],
        "actions": [
          "Create new DEF buff instance",
          "Apply buff to ability user",
          "Emit buff_applied event"
        ]
      },
      {
        "trigger": "turn_end",
        "actions": [
          "Update buff durations",
          "Remove expired buffs",
          "Emit buff_removed event if buff expires"
        ]
      }
    ],
    "pseudocode": {
      "buff_application": [
        "function handleAbilityUsed(event: AbilityUsedEvent) {",
        "  if (!isAoeAbility(event.ability)) return;",
        "  if (!hasBlessing(event.actor, 'canopy_of_mottled_metal')) return;",
        "  ",
        "  const buff = createBuff({",
        "    id: 'canopy_def_buff',",
        "    value: 30,",
        "    duration: 2",
        "  });",
        "  ",
        "  buffManager.applyBuff(event.actor, buff);",
        "  emitEvent('buff_applied', { target: event.actor, buff });",
        "}"
      ],
      "buff_update": [
        "function handleTurnEnd(event: TurnEndEvent) {",
        "  for (const unit of getAllUnits()) {",
        "    const expiredBuffs = buffManager.updateBuffDurations(unit);",
        "    for (const buff of expiredBuffs) {",
        "      buffManager.removeBuff(unit, buff.id);",
        "      emitEvent('buff_removed', { target: unit, buff });",
        "    }",
        "  }",
        "}"
      ]
    }
  },
  "validation": {
    "success_conditions": [
      "Player unit's DEF increases by 30% after using an AoE skill or AoE ultimate",
      "DEF buff lasts for exactly 2 turns",
      "DEF buff is applied immediately after the AoE ability is used",
      "DEF buff stacks multiplicatively with other DEF buffs",
      "DEF buff applies regardless of whether the ability is a skill or ultimate, as long as it's AoE"
    ],
    "edge_cases": [
      "Buff should be applied for both AoE and splash damage abilities",
      "Buff should not be applied for single-target abilities",
      "Buff duration should be tracked correctly across multiple turns",
      "Buff should be removed exactly after 2 turns, not before or after",
      "Multiple instances of the same buff should refresh the duration",
      "DEF buff should affect incoming damage calculations correctly"
    ]
  }
}